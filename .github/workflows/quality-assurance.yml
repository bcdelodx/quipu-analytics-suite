name: Quality Assurance & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Verify installation
      run: |
        python verify_installation.py
    
    - name: Code formatting check with Black
      run: |
        black --check --diff .
    
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff .
    
    - name: Style check with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Comprehensive linting with pylint
      run: |
        pylint *.py --fail-under=9.0
    
    - name: Type checking with mypy
      run: |
        mypy *.py --ignore-missing-imports
      continue-on-error: true  # Allow to fail for now

  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit
        pip install -r requirements.txt
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --skip B101,B601
    
    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Audit pip packages
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  testing:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run test suite
      run: |
        python tests/test_suite.py
    
    - name: Run pytest with coverage
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Notebook validation (sample)
      run: |
        # Test first few notebooks to ensure they're valid
        python -c "
        import json
        from pathlib import Path
        notebooks = list(Path('.').glob('Tier1_*.ipynb'))[:3]
        for nb in notebooks:
            with open(nb) as f:
                json.load(f)
            print(f'âœ“ {nb.name} is valid')
        "

  documentation:
    name: Documentation & Standards
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required documentation files
      run: |
        required_files=("README.md" "LICENSE" "CHANGELOG.md" "CONTRIBUTING.md" "CONTRIBUTORS.md")
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "Missing required file: $file"
            exit 1
          else
            echo "Found: $file"
          fi
        done
    
    - name: Validate JSON files
      run: |
        find . -name "*.json" -not -path "./.git/*" -not -path "./.*" | xargs -I {} python -m json.tool {} > /dev/null
    
    - name: Check for sensitive data patterns
      run: |
        # Check for potential secrets (basic patterns)
        if grep -r -i "password\|api_key\|secret\|token" --include="*.py" --include="*.ipynb" .; then
          echo "Warning: Potential sensitive data found - please review"
          exit 1
        else
          echo "No obvious sensitive data patterns found"
        fi
    
    - name: Markdown link check
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-check-config.json'
      continue-on-error: true

  reproducibility:
    name: Reproducibility & Environment
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test environment setup
      run: |
        python -m venv test_env
        source test_env/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        python verify_installation.py
    
    - name: Check dependency consistency
      run: |
        python -c "
        import pkg_resources
        import sys
        
        # Check for dependency conflicts
        try:
            pkg_resources.require(open('requirements.txt').readlines())
            print('No dependency conflicts found')
        except pkg_resources.DistributionNotFound as e:
            print(f'Missing dependency: {e}')
            sys.exit(1)
        except pkg_resources.VersionConflict as e:
            print(f'Version conflict: {e}')
            sys.exit(1)
        "
    
    - name: Test notebook execution (sample)
      run: |
        pip install nbconvert
        # Test execution of a simple notebook (if it exists)
        if ls Tier1_*.ipynb 1> /dev/null 2>&1; then
          echo "Found Tier 1 notebooks - would test execution in production"
          # jupyter nbconvert --to notebook --execute Tier1_Descriptive.ipynb --output /tmp/test_output.ipynb
        fi

  release-readiness:
    name: Release Readiness Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check version consistency
      run: |
        # Extract version from setup.py
        SETUP_VERSION=$(python -c "import re; content=open('setup.py').read(); print(re.search(r'version=\"([^\"]+)\"', content).group(1))")
        echo "Setup.py version: $SETUP_VERSION"
        
        # Check if CHANGELOG has entry for this version
        if grep -q "$SETUP_VERSION" CHANGELOG.md; then
          echo "Version $SETUP_VERSION found in CHANGELOG.md"
        else
          echo "Warning: Version $SETUP_VERSION not found in CHANGELOG.md"
        fi
    
    - name: Tag consistency check
      run: |
        # Check if current commit should be tagged
        SETUP_VERSION=$(python -c "import re; content=open('setup.py').read(); print(re.search(r'version=\"([^\"]+)\"', content).group(1))")
        if git tag -l | grep -q "v$SETUP_VERSION"; then
          echo "Tag v$SETUP_VERSION already exists"
        else
          echo "Info: Tag v$SETUP_VERSION does not exist - may need release"
        fi